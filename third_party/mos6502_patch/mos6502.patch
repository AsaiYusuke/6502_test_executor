diff --git a/mos6502.cpp b/mos6502.cpp
index 747786c..346eae5 100644
--- a/mos6502.cpp
+++ b/mos6502.cpp
@@ -1,10 +1,9 @@
 
 #include "mos6502.h"
 
-mos6502::mos6502(BusRead r, BusWrite w)
+mos6502::mos6502(i_memory_access *memory_access)
 {
-	Write = (BusWrite)w;
-	Read = (BusRead)r;
+	this->memory_access = memory_access;
 	Instr instr;
 
 	// fill jump table with ILLEGALs
@@ -696,8 +695,8 @@ uint16_t mos6502::Addr_ABS()
 	uint16_t addrH;
 	uint16_t addr;
 
-	addrL = Read(pc++);
-	addrH = Read(pc++);
+	addrL = memory_access->read(pc++);
+	addrH = memory_access->read(pc++);
 
 	addr = addrL + (addrH << 8);
 
@@ -706,7 +705,7 @@ uint16_t mos6502::Addr_ABS()
 
 uint16_t mos6502::Addr_ZER()
 {
-	return Read(pc++);
+	return memory_access->read(pc++);
 }
 
 uint16_t mos6502::Addr_IMP()
@@ -719,7 +718,7 @@ uint16_t mos6502::Addr_REL()
 	uint16_t offset;
 	uint16_t addr;
 
-	offset = (uint16_t)Read(pc++);
+	offset = (uint16_t)memory_access->read(pc++);
 	if (offset & 0x80) offset |= 0xFF00;
 	addr = pc + (int16_t)offset;
 	return addr;
@@ -734,17 +733,17 @@ uint16_t mos6502::Addr_ABI()
 	uint16_t abs;
 	uint16_t addr;
 
-	addrL = Read(pc++);
-	addrH = Read(pc++);
+	addrL = memory_access->read(pc++);
+	addrH = memory_access->read(pc++);
 
 	abs = (addrH << 8) | addrL;
 
-	effL = Read(abs);
+	effL = memory_access->read(abs);
 
 #ifndef CMOS_INDIRECT_JMP_FIX
-	effH = Read((abs & 0xFF00) + ((abs + 1) & 0x00FF) );
+	effH = memory_access->read((abs & 0xFF00) + ((abs + 1) & 0x00FF) );
 #else
-	effH = Read(abs + 1);
+	effH = memory_access->read(abs + 1);
 #endif
 
 	addr = effL + 0x100 * effH;
@@ -754,13 +753,13 @@ uint16_t mos6502::Addr_ABI()
 
 uint16_t mos6502::Addr_ZEX()
 {
-	uint16_t addr = (Read(pc++) + X) % 256;
+	uint16_t addr = (memory_access->read(pc++) + X) % 256;
 	return addr;
 }
 
 uint16_t mos6502::Addr_ZEY()
 {
-	uint16_t addr = (Read(pc++) + Y) % 256;
+	uint16_t addr = (memory_access->read(pc++) + Y) % 256;
 	return addr;
 }
 
@@ -770,8 +769,8 @@ uint16_t mos6502::Addr_ABX()
 	uint16_t addrL;
 	uint16_t addrH;
 
-	addrL = Read(pc++);
-	addrH = Read(pc++);
+	addrL = memory_access->read(pc++);
+	addrH = memory_access->read(pc++);
 
 	addr = addrL + (addrH << 8) + X;
 	return addr;
@@ -783,8 +782,8 @@ uint16_t mos6502::Addr_ABY()
 	uint16_t addrL;
 	uint16_t addrH;
 
-	addrL = Read(pc++);
-	addrH = Read(pc++);
+	addrL = memory_access->read(pc++);
+	addrH = memory_access->read(pc++);
 
 	addr = addrL + (addrH << 8) + Y;
 	return addr;
@@ -797,9 +796,9 @@ uint16_t mos6502::Addr_INX()
 	uint16_t zeroH;
 	uint16_t addr;
 
-	zeroL = (Read(pc++) + X) % 256;
+	zeroL = (memory_access->read(pc++) + X) % 256;
 	zeroH = (zeroL + 1) % 256;
-	addr = Read(zeroL) + (Read(zeroH) << 8);
+	addr = memory_access->read(zeroL) + (memory_access->read(zeroH) << 8);
 
 	return addr;
 }
@@ -810,9 +809,9 @@ uint16_t mos6502::Addr_INY()
 	uint16_t zeroH;
 	uint16_t addr;
 
-	zeroL = Read(pc++);
+	zeroL = memory_access->read(pc++);
 	zeroH = (zeroL + 1) % 256;
-	addr = Read(zeroL) + (Read(zeroH) << 8) + Y;
+	addr = memory_access->read(zeroL) + (memory_access->read(zeroH) << 8) + Y;
 
 	return addr;
 }
@@ -823,7 +822,7 @@ void mos6502::Reset()
 	Y = reset_Y;
 	X = reset_X;
 
-	pc = (Read(rstVectorH) << 8) + Read(rstVectorL); // load PC from reset vector
+	pc = (memory_access->read_raw(rstVectorH) << 8) + memory_access->read_raw(rstVectorL); // load PC from reset vector
 
 	sp = reset_sp;
 
@@ -836,7 +835,7 @@ void mos6502::Reset()
 
 void mos6502::StackPush(uint8_t byte)
 {
-	Write(0x0100 + sp, byte);
+	memory_access->write(0x0100 + sp, byte);
 	if(sp == 0x00) sp = 0xFF;
 	else sp--;
 }
@@ -845,7 +844,7 @@ uint8_t mos6502::StackPop()
 {
 	if(sp == 0xFF) sp = 0x00;
 	else sp++;
-	return Read(0x0100 + sp);
+	return memory_access->read(0x0100 + sp);
 }
 
 void mos6502::IRQ()
@@ -857,7 +856,7 @@ void mos6502::IRQ()
 		StackPush(pc & 0xFF);
 		StackPush((status & ~BREAK) | CONSTANT);
 		SET_INTERRUPT(1);
-		pc = (Read(irqVectorH) << 8) + Read(irqVectorL);
+		pc = (memory_access->read(irqVectorH) << 8) + memory_access->read(irqVectorL);
 	}
 	return;
 }
@@ -869,7 +868,7 @@ void mos6502::NMI()
 	StackPush(pc & 0xFF);
 	StackPush((status & ~BREAK) | CONSTANT);
 	SET_INTERRUPT(1);
-	pc = (Read(nmiVectorH) << 8) + Read(nmiVectorL);
+	pc = (memory_access->read(nmiVectorH) << 8) + memory_access->read(nmiVectorL);
 	return;
 }
 
@@ -884,7 +883,7 @@ void mos6502::Run(
 	while(cyclesRemaining > 0 && !illegalOpcode)
 	{
 		// fetch
-		opcode = Read(pc++);
+		opcode = memory_access->read(pc++);
 
 		// decode
 		instr = InstrTable[opcode];
@@ -992,7 +991,7 @@ void mos6502::Op_ILLEGAL(uint16_t src)
 
 void mos6502::Op_ADC(uint16_t src)
 {
-	uint8_t m = Read(src);
+	uint8_t m = memory_access->read_data(src);
 	unsigned int tmp = m + A + (IF_CARRY() ? 1 : 0);
 	SET_ZERO(!(tmp & 0xFF));
 	if (IF_DECIMAL())
@@ -1021,7 +1020,7 @@ void mos6502::Op_ADC(uint16_t src)
 
 void mos6502::Op_AND(uint16_t src)
 {
-	uint8_t m = Read(src);
+	uint8_t m = memory_access->read_data(src);
 	uint8_t res = m & A;
 	SET_NEGATIVE(res & 0x80);
 	SET_ZERO(!res);
@@ -1032,13 +1031,13 @@ void mos6502::Op_AND(uint16_t src)
 
 void mos6502::Op_ASL(uint16_t src)
 {
-	uint8_t m = Read(src);
+	uint8_t m = memory_access->read_data(src);
 	SET_CARRY(m & 0x80);
 	m <<= 1;
 	m &= 0xFF;
 	SET_NEGATIVE(m & 0x80);
 	SET_ZERO(!m);
-	Write(src, m);
+	memory_access->write_data(src, m);
 	return;
 }
 
@@ -1084,7 +1083,7 @@ void mos6502::Op_BEQ(uint16_t src)
 
 void mos6502::Op_BIT(uint16_t src)
 {
-	uint8_t m = Read(src);
+	uint8_t m = memory_access->read_data(src);
 	uint8_t res = m & A;
 	SET_NEGATIVE(res & 0x80);
 	status = (status & 0x3F) | (uint8_t)(m & 0xC0) | CONSTANT | BREAK;
@@ -1126,7 +1125,7 @@ void mos6502::Op_BRK(uint16_t src)
 	StackPush(pc & 0xFF);
 	StackPush(status | CONSTANT | BREAK);
 	SET_INTERRUPT(1);
-	pc = (Read(irqVectorH) << 8) + Read(irqVectorL);
+	pc = (memory_access->read_data(irqVectorH) << 8) + memory_access->read_data(irqVectorL);
 	return;
 }
 
@@ -1174,7 +1173,7 @@ void mos6502::Op_CLV(uint16_t src)
 
 void mos6502::Op_CMP(uint16_t src)
 {
-	unsigned int tmp = A - Read(src);
+	unsigned int tmp = A - memory_access->read_data(src);
 	SET_CARRY(tmp < 0x100);
 	SET_NEGATIVE(tmp & 0x80);
 	SET_ZERO(!(tmp & 0xFF));
@@ -1183,7 +1182,7 @@ void mos6502::Op_CMP(uint16_t src)
 
 void mos6502::Op_CPX(uint16_t src)
 {
-	unsigned int tmp = X - Read(src);
+	unsigned int tmp = X - memory_access->read_data(src);
 	SET_CARRY(tmp < 0x100);
 	SET_NEGATIVE(tmp & 0x80);
 	SET_ZERO(!(tmp & 0xFF));
@@ -1192,7 +1191,7 @@ void mos6502::Op_CPX(uint16_t src)
 
 void mos6502::Op_CPY(uint16_t src)
 {
-	unsigned int tmp = Y - Read(src);
+	unsigned int tmp = Y - memory_access->read_data(src);
 	SET_CARRY(tmp < 0x100);
 	SET_NEGATIVE(tmp & 0x80);
 	SET_ZERO(!(tmp & 0xFF));
@@ -1201,11 +1200,11 @@ void mos6502::Op_CPY(uint16_t src)
 
 void mos6502::Op_DEC(uint16_t src)
 {
-	uint8_t m = Read(src);
+	uint8_t m = memory_access->read_data(src);
 	m = (m - 1) % 256;
 	SET_NEGATIVE(m & 0x80);
 	SET_ZERO(!m);
-	Write(src, m);
+	memory_access->write_data(src, m);
 	return;
 }
 
@@ -1231,7 +1230,7 @@ void mos6502::Op_DEY(uint16_t src)
 
 void mos6502::Op_EOR(uint16_t src)
 {
-	uint8_t m = Read(src);
+	uint8_t m = memory_access->read_data(src);
 	m = A ^ m;
 	SET_NEGATIVE(m & 0x80);
 	SET_ZERO(!m);
@@ -1240,11 +1239,11 @@ void mos6502::Op_EOR(uint16_t src)
 
 void mos6502::Op_INC(uint16_t src)
 {
-	uint8_t m = Read(src);
+	uint8_t m = memory_access->read_data(src);
 	m = (m + 1) % 256;
 	SET_NEGATIVE(m & 0x80);
 	SET_ZERO(!m);
-	Write(src, m);
+	memory_access->write_data(src, m);
 }
 
 void mos6502::Op_INX(uint16_t src)
@@ -1280,7 +1279,7 @@ void mos6502::Op_JSR(uint16_t src)
 
 void mos6502::Op_LDA(uint16_t src)
 {
-	uint8_t m = Read(src);
+	uint8_t m = memory_access->read_data(src);
 	SET_NEGATIVE(m & 0x80);
 	SET_ZERO(!m);
 	A = m;
@@ -1288,7 +1287,7 @@ void mos6502::Op_LDA(uint16_t src)
 
 void mos6502::Op_LDX(uint16_t src)
 {
-	uint8_t m = Read(src);
+	uint8_t m = memory_access->read_data(src);
 	SET_NEGATIVE(m & 0x80);
 	SET_ZERO(!m);
 	X = m;
@@ -1296,7 +1295,7 @@ void mos6502::Op_LDX(uint16_t src)
 
 void mos6502::Op_LDY(uint16_t src)
 {
-	uint8_t m = Read(src);
+	uint8_t m = memory_access->read_data(src);
 	SET_NEGATIVE(m & 0x80);
 	SET_ZERO(!m);
 	Y = m;
@@ -1304,12 +1303,12 @@ void mos6502::Op_LDY(uint16_t src)
 
 void mos6502::Op_LSR(uint16_t src)
 {
-	uint8_t m = Read(src);
+	uint8_t m = memory_access->read_data(src);
 	SET_CARRY(m & 0x01);
 	m >>= 1;
 	SET_NEGATIVE(0);
 	SET_ZERO(!m);
-	Write(src, m);
+	memory_access->write_data(src, m);
 }
 
 void mos6502::Op_LSR_ACC(uint16_t src)
@@ -1329,7 +1328,7 @@ void mos6502::Op_NOP(uint16_t src)
 
 void mos6502::Op_ORA(uint16_t src)
 {
-	uint8_t m = Read(src);
+	uint8_t m = memory_access->read_data(src);
 	m = A | m;
 	SET_NEGATIVE(m & 0x80);
 	SET_ZERO(!m);
@@ -1365,14 +1364,14 @@ void mos6502::Op_PLP(uint16_t src)
 
 void mos6502::Op_ROL(uint16_t src)
 {
-	uint16_t m = Read(src);
+	uint16_t m = memory_access->read_data(src);
 	m <<= 1;
 	if (IF_CARRY()) m |= 0x01;
 	SET_CARRY(m > 0xFF);
 	m &= 0xFF;
 	SET_NEGATIVE(m & 0x80);
 	SET_ZERO(!m);
-	Write(src, m);
+	memory_access->write_data(src, m);
 	return;
 }
 
@@ -1391,14 +1390,14 @@ void mos6502::Op_ROL_ACC(uint16_t src)
 
 void mos6502::Op_ROR(uint16_t src)
 {
-	uint16_t m = Read(src);
+	uint16_t m = memory_access->read_data(src);
 	if (IF_CARRY()) m |= 0x100;
 	SET_CARRY(m & 0x01);
 	m >>= 1;
 	m &= 0xFF;
 	SET_NEGATIVE(m & 0x80);
 	SET_ZERO(!m);
-	Write(src, m);
+	memory_access->write_data(src, m);
 	return;
 }
 
@@ -1441,7 +1440,7 @@ void mos6502::Op_RTS(uint16_t src)
 
 void mos6502::Op_SBC(uint16_t src)
 {
-	uint8_t m = Read(src);
+	uint8_t m = memory_access->read_data(src);
 	unsigned int tmp = A - m - (IF_CARRY() ? 0 : 1);
 	SET_NEGATIVE(tmp & 0x80);
 	SET_ZERO(!(tmp & 0xFF));
@@ -1480,19 +1479,19 @@ void mos6502::Op_SEI(uint16_t src)
 
 void mos6502::Op_STA(uint16_t src)
 {
-	Write(src, A);
+	memory_access->write_data(src, A);
 	return;
 }
 
 void mos6502::Op_STX(uint16_t src)
 {
-	Write(src, X);
+	memory_access->write_data(src, X);
 	return;
 }
 
 void mos6502::Op_STY(uint16_t src)
 {
-	Write(src, Y);
+	memory_access->write_data(src, Y);
 	return;
 }
 
diff --git a/mos6502.h b/mos6502.h
index 37c40ea..d165f54 100644
--- a/mos6502.h
+++ b/mos6502.h
@@ -10,6 +10,7 @@
 
 #include <iostream>
 #include <stdint.h>
+#include "emulation/memory_access.hpp"
 using namespace std;
 
 #define NEGATIVE  0x80
@@ -43,7 +44,7 @@ using namespace std;
 
 class mos6502
 {
-private:
+protected:
     // register reset values
     uint8_t reset_A = 0x00;
     uint8_t reset_X = 0x00;
@@ -174,22 +175,18 @@ private:
 	static const uint16_t nmiVectorH = 0xFFFB;
 	static const uint16_t nmiVectorL = 0xFFFA;
 
-	// read/write callbacks
-	typedef void (*BusWrite)(uint16_t, uint8_t);
-	typedef uint8_t (*BusRead)(uint16_t);
-	BusRead Read;
-	BusWrite Write;
-
 	// stack operations
-	inline void StackPush(uint8_t byte);
-	inline uint8_t StackPop();
+	void StackPush(uint8_t byte);
+	uint8_t StackPop();
+
+	i_memory_access *memory_access;
 
 public:
 	enum CycleMethod {
 		INST_COUNT,
 		CYCLE_COUNT,
 	};
-	mos6502(BusRead r, BusWrite w);
+    mos6502(i_memory_access *i_memory_access);
 	void NMI();
 	void IRQ();
 	void Reset();
